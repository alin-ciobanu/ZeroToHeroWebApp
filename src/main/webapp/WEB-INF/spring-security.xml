<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<http auto-config='true' use-expressions="true">
		<form-login login-page="/login" authentication-failure-url="/loginfailed"
			authentication-success-handler-ref="myAuthenticationSuccessHandler" />
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/employee/**"
			access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />
		<logout logout-success-url="/logout" />
		<access-denied-handler error-page="/login?error=403" />
	</http>

	<beans:bean id="myAuthenticationSuccessHandler" class="ro.zerotohero.utils.CustomAuthHandler" />
	<!-- <authentication-manager> <authentication-provider> <user-service> <user 
		name="qqq" password="qqq" authorities="ROLE_ADMIN" /> <user name="www" password="www" 
		authorities="ROLE_USER" /> </user-service> </authentication-provider> </authentication-manager> -->


	<authentication-manager>
		<authentication-provider>
			<jdbc-user-service data-source-ref="myDataSource"

				users-by-username-query="select email,password, 1 from employee where email=?"

				authorities-by-username-query="select e.email, r.authority from employee e 
join employee_role on e.employee_id = employee_role.employee_id
join role r on r.role_id = employee_role.role_id
where e.email = ?" />
		</authentication-provider>
	</authentication-manager>


</beans:beans>